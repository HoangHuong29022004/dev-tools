#!/bin/bash

# üöÄ Fix Nhanh D·ª± √Ån Mitsuheavy-Ecommerce
# S·ª≠a c√°c v·∫•n ƒë·ªÅ CSP, font loading v√† JavaScript

set -e

# M√†u s·∫Øc
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Function ƒë·ªÉ fix m·ªôt d·ª± √°n c·ª• th·ªÉ
fix_project() {
    local project_name=$1
    local domain="${project_name}.code"
    local project_path="/opt/homebrew/var/www/$project_name"
    local nginx_config="/opt/homebrew/etc/nginx/sites-available/$domain"
    
    print_status "üîß ƒêang fix d·ª± √°n: $project_name"
    
    # Ki·ªÉm tra d·ª± √°n
    if [ ! -d "$project_path" ]; then
        print_error "D·ª± √°n kh√¥ng t·ªìn t·∫°i t·∫°i: $project_path"
        return 1
    fi
    
    if [ ! -f "$nginx_config" ]; then
        print_error "C·∫•u h√¨nh Nginx kh√¥ng t·ªìn t·∫°i: $nginx_config"
        return 1
    fi
    
    print_success "D·ª± √°n v√† c·∫•u h√¨nh Nginx ƒë√£ t·ªìn t·∫°i"
    
    # Backup c·∫•u h√¨nh c≈©
    print_status "Backup c·∫•u h√¨nh c≈©..."
    cp "$nginx_config" "${nginx_config}.backup.$(date +%Y%m%d_%H%M%S)"
    print_success "ƒê√£ backup c·∫•u h√¨nh c≈©"
    
    # T·∫°o c·∫•u h√¨nh Nginx m·ªõi v·ªõi fix
    print_status "T·∫°o c·∫•u h√¨nh Nginx m·ªõi v·ªõi fix..."
    
    # Auto-detect PHP version based on project name
    local php_port="9082"  # Default PHP 8.2
    if [ "$project_name" = "haili-baohanh" ]; then
        php_port="9074"  # PHP 7.4
    fi
    
    # Auto-detect PHP version from .php-version file if exists
    if [ -f "$project_path/.php-version" ]; then
        local project_php_version=$(cat "$project_path/.php-version" | tr -d '[:space:]')
        case $project_php_version in
            "7.4") php_port="9074" ;;
            "8.0") php_port="9080" ;;
            "8.1") php_port="9081" ;;
            "8.2") php_port="9082" ;;
            "8.3") php_port="9083" ;;
        esac
        print_info "   üìã D·ª± √°n y√™u c·∫ßu PHP $project_php_version (Port $php_port)"
    fi
    
    cat > "$nginx_config" << EOF
server {
    listen 80;
    server_name $domain;
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl;
    http2 on;
    server_name $domain;
    root $project_path/public;
    
    # SSL Configuration
    ssl_certificate     /opt/homebrew/etc/nginx/ssl/$domain.crt;
    ssl_certificate_key /opt/homebrew/etc/nginx/ssl/$domain.key;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    
    index index.php index.html;
    charset utf-8;
    client_max_body_size 100M;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy - Allow Vue.js and modern web apps
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; font-src 'self' http: https: data: blob:; img-src 'self' http: https: data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' http: https:; style-src 'self' 'unsafe-inline' http: https:; connect-src 'self' http: https: wss: ws:;" always;
    
    # Logs
    access_log /opt/homebrew/var/log/nginx/$domain-access.log combined;
    error_log /opt/homebrew/var/log/nginx/$domain-error.log warn;
    
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
        
        # Handle Vue.js routing
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            try_files \$uri =404;
        }
    }
    
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
    
    # PHP-FPM Configuration - Auto-detect PHP version
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:$php_port;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_read_timeout 600;
    }
    
    location ~ /\.(?!well-known).* {
        deny all;
    }
    
    # Browser Caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|eot|ttf|woff|woff2)$ {
        expires max;
        add_header Cache-Control "public, no-transform";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
    }
    
    # Font files with proper CORS headers
    location ~* \.(woff|woff2|ttf|eot|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
        add_header Vary "Accept-Encoding";
    }
}
EOF
    
    print_success "ƒê√£ t·∫°o c·∫•u h√¨nh Nginx m·ªõi cho $project_name"
    return 0
}

# Main function
main() {
    # Ki·ªÉm tra tham s·ªë
    if [ "$1" = "all" ]; then
        print_status "üöÄ Fix t·∫•t c·∫£ d·ª± √°n..."
        
        # L·∫•y danh s√°ch t·∫•t c·∫£ d·ª± √°n
        if [ -d "/opt/homebrew/var/www" ]; then
            local projects=()
            for project in /opt/homebrew/var/www/*; do
                if [ -d "$project" ]; then
                    projects+=("$(basename "$project")")
                fi
            done
            
            if [ ${#projects[@]} -eq 0 ]; then
                print_warning "Kh√¥ng c√≥ d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o!"
                return
            fi
            
            print_info "T√¨m th·∫•y ${#projects[@]} d·ª± √°n:"
            for project in "${projects[@]}"; do
                echo "  üìÅ $project"
            done
            
            echo ""
            read -p "B·∫°n c√≥ mu·ªën fix t·∫•t c·∫£ d·ª± √°n n√†y kh√¥ng? (y/N): " confirm
            
            if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                local success_count=0
                local total_count=${#projects[@]}
                
                for project in "${projects[@]}"; do
                    echo ""
                    if fix_project "$project"; then
                        ((success_count++))
                    fi
                done
                
                echo ""
                print_success "üéâ ƒê√£ fix xong $success_count/$total_count d·ª± √°n!"
                
                # Ki·ªÉm tra c·∫•u h√¨nh Nginx
                print_status "Ki·ªÉm tra c·∫•u h√¨nh Nginx..."
                if nginx -t 2>&1 | grep -q "syntax is ok"; then
                    print_success "C·∫•u h√¨nh Nginx h·ª£p l·ªá"
                    
                    # Reload Nginx
                    print_status "Reload Nginx..."
                    nginx -s reload 2>/dev/null
                    if [ $? -eq 0 ]; then
                        print_success "ƒê√£ reload Nginx th√†nh c√¥ng"
                    else
                        print_warning "Reload Nginx th·∫•t b·∫°i, th·ª≠ restart..."
                        brew services restart nginx
                        print_success "ƒê√£ restart Nginx"
                    fi
                else
                    print_error "C·∫•u h√¨nh Nginx c√≥ l·ªói!"
                    nginx -t
                    exit 1
                fi
            else
                print_info "ƒê√£ h·ªßy fix t·∫•t c·∫£ d·ª± √°n"
            fi
        else
            print_error "Th∆∞ m·ª•c d·ª± √°n kh√¥ng t·ªìn t·∫°i!"
        fi
        
    elif [ "$1" = "list" ]; then
        print_status "üìã Danh s√°ch d·ª± √°n:"
        
        if [ -d "/opt/homebrew/var/www" ]; then
            local projects=()
            for project in /opt/homebrew/var/www/*; do
                if [ -d "$project" ]; then
                    projects+=("$(basename "$project")")
                fi
            done
            
            if [ ${#projects[@]} -eq 0 ]; then
                echo "Kh√¥ng c√≥ d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o!"
            else
                for i in "${!projects[@]}"; do
                    local project="${projects[$i]}"
                    local domain="${project}.code"
                    local nginx_config="/opt/homebrew/etc/nginx/sites-available/$domain"
                    
                    if [ -f "$nginx_config" ]; then
                        echo "  $((i+1))) $project (‚úÖ C√≥ c·∫•u h√¨nh Nginx)"
                    else
                        echo "  $((i+1))) $project (‚ùå Ch∆∞a c√≥ c·∫•u h√¨nh Nginx)"
                    fi
                done
            fi
        else
            echo "Th∆∞ m·ª•c d·ª± √°n kh√¥ng t·ªìn t·∫°i!"
        fi
        
    elif [ "$1" = "status" ]; then
        print_status "üìä Tr·∫°ng th√°i c√°c d·ª± √°n:"
        
        if [ -d "/opt/homebrew/var/www" ]; then
            local projects=()
            for project in /opt/homebrew/var/www/*; do
                if [ -d "$project" ]; then
                    projects+=("$(basename "$project")")
                fi
            done
            
            if [ ${#projects[@]} -eq 0 ]; then
                echo "Kh√¥ng c√≥ d·ª± √°n n√†o ƒë∆∞·ª£c t·∫°o!"
            else
                for project in "${projects[@]}"; do
                    local domain="${project}.code"
                    echo ""
                    print_info "D·ª± √°n: $project"
                    
                    # Ki·ªÉm tra c·∫•u h√¨nh Nginx
                    local nginx_config="/opt/homebrew/etc/nginx/sites-available/$domain"
                    if [ -f "$nginx_config" ]; then
                        echo "  ‚úÖ C·∫•u h√¨nh Nginx: OK"
                        
                        # Ki·ªÉm tra website
                        if curl -k -s -o /dev/null -w "%{http_code}" "https://$domain" 2>/dev/null | grep -q "200\|301\|302"; then
                            echo "  ‚úÖ Website: Ho·∫°t ƒë·ªông (https://$domain)"
                        else
                            echo "  ‚ùå Website: Kh√¥ng ho·∫°t ƒë·ªông"
                        fi
                    else
                        echo "  ‚ùå C·∫•u h√¨nh Nginx: Ch∆∞a c√≥"
                    fi
                done
            fi
        else
            echo "Th∆∞ m·ª•c d·ª± √°n kh√¥ng t·ªìn t·∫°i!"
        fi
        
    elif [ -n "$1" ]; then
        # Fix d·ª± √°n c·ª• th·ªÉ
        if fix_project "$1"; then
            echo ""
            print_success "üéâ ƒê√£ fix xong d·ª± √°n $1!"
            echo "C√°c v·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c s·ª≠a:"
            echo "  ‚úÖ Content Security Policy (CSP) - Cho ph√©p Vue.js ho·∫°t ƒë·ªông"
            echo "  ‚úÖ Font loading - CORS headers cho fonts"
            echo "  ‚úÖ JavaScript execution - Cho ph√©p 'unsafe-eval'"
            echo "  ‚úÖ Static file handling - Cache v√† CORS cho assets"
            echo ""
            echo "Truy c·∫≠p: https://$1.code"
            echo "Ki·ªÉm tra Console ƒë·ªÉ xem c√≤n l·ªói n√†o kh√¥ng"
        fi
        
    else
        # Hi·ªÉn th·ªã tr·ª£ gi√∫p
        echo "üöÄ Fix Nhanh D·ª± √Ån - H·ªó tr·ª£ t·∫•t c·∫£ d·ª± √°n"
        echo "=========================================="
        echo ""
        echo "C√°ch s·ª≠ d·ª•ng:"
        echo "  $0                    - Hi·ªÉn th·ªã tr·ª£ gi√∫p"
        echo "  $0 all                - Fix t·∫•t c·∫£ d·ª± √°n"
        echo "  $0 list               - Li·ªát k√™ t·∫•t c·∫£ d·ª± √°n"
        echo "  $0 status             - Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ d·ª± √°n"
        echo "  $0 <t√™n_d·ª±_√°n>       - Fix d·ª± √°n c·ª• th·ªÉ"
        echo ""
        echo "V√≠ d·ª•:"
        echo "  $0 all                - Fix t·∫•t c·∫£ d·ª± √°n"
        echo "  $0 mitsuheavy-ecommerce - Fix d·ª± √°n mitsuheavy-ecommerce"
        echo "  $0 haili-baohanh      - Fix d·ª± √°n haili-baohanh"
        echo ""
        echo "C√°c v·∫•n ƒë·ªÅ s·∫Ω ƒë∆∞·ª£c s·ª≠a:"
        echo "  ‚úÖ Content Security Policy (CSP)"
        echo "  ‚úÖ Font loading v·ªõi CORS headers"
        echo "  ‚úÖ JavaScript execution"
        echo "  ‚úÖ Static file handling"
        echo "  ‚úÖ Auto-detect PHP version t·ª´ .php-version"
    fi
}

# Function in m√†u
print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# G·ªçi main function
main "$@"
